{
    "componentChunkName": "component---src-templates-blog-blog-post-template-jsx",
    "path": "/blog/18/02/2022/Glue-Viz-for-Heterogeneous-Data",
    "result": {"data":{"mdx":{"id":"4cc7aebe-f567-5c65-a4a2-4901b07a7615","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"author\": [\"Yu Liang Weng\"],\n  \"title\": \"GlueViz for Heterogeneous data\",\n  \"description\": \"An open-sourced Python library with graphical user interace. Built on top of well known packages such as Numpy, Scipy, and Matplotlib.\",\n  \"date\": \"2022-02-18T00:00:00.000Z\",\n  \"category\": [\"Articles\"],\n  \"tag\": [\"Heterogeneous\", \"Python\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This is an event blog for the \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://n8cir.org.uk/events/glueviz/\"\n  }, \"GlueViz workshop\"), \" hosted by the N8 Centre of Excellence in Computationally Intensive Research (N8 CIR). You can access the training materials from \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://n8cir.org.uk/events/event-resource/glueviz/\"\n  }, \"here\"), \".\")), mdx(\"h2\", {\n    \"id\": \"heterogeneous-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#heterogeneous-data\",\n    \"aria-label\": \"heterogeneous data permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"Heterogeneous data\"), mdx(\"p\", null, \"Heterogeneous data refers to data samples coming from a number of distinct sources which could well be independent or very different to each other. However, modern research often involves exploration and analysis of interrelated heterogeneous data which cannot be done simply by programming scripts. For example, how do you interpret the daily recorded rainfall in the context of hourly recorded temperature? Given that we have a multiple of social-economic datasets for a variety of different populations, how do we find the commonality and difference between these populations? Sometimes we would like to combine data that are not naturally linked together, but there isn't an easy way to achieve this using static visualisations. Hence the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Glue\"), \" word used for the Python library \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GlueViz\"), \".\"), mdx(\"p\", null, \"Definition of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"heterogeneous\"), \" by the speaker \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://eps.leeds.ac.uk/computing/staff/540/dr-jonathan-pickering\"\n  }, \"Jonathan H Pickering\")), \":\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Items within the data have a diverse nature and are incommensurable because of their different natures.\")), mdx(\"h2\", {\n    \"id\": \"glueviz\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#glueviz\",\n    \"aria-label\": \"glueviz permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"GlueViz\"), mdx(\"p\", null, \"The creation of GlueViz dates back to 2012 with additional features added overtime. The data viewer tool is built on top of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://matplotlib.org/\"\n  }, \"Matplotlib\"), \" visualisation library and enables you to visualise the data using Histogram, Image, Scatter plots, Dendrogram, and Table. In the most recent version \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"v1.2\"), \" you will find a new data viewer which is called \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"3D Scatter\"), \" that can generate some very interesting three-dimensional plots. However, I\", \"'\", \"m slightly disappointed about the number of plots that Glueviz provided. Nevertheless, if you want to run something programmatically then Glueviz does have some flexibility as it has an integrated Python IPython terminal so you could extend Glueviz further and write custom scripts, and create your own data viewer!\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/8acbe69381ef75bd7c1dcb44f95b693d/earthquake.gif\",\n    \"alt\": \"3D scatter plot of earthquake locations\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image 0. 3D scatter plot of earthquake locations\")), mdx(\"p\", null, \"We have talked about heterogeneous data, but GlueViz is also quite useful in exploring just a single dataset. If we were writing Python scripts for some simple data exploration, we would need to import some packages, read and perhaps transform the data file, then call the target method to draw a chart. In the GlueViz software, most stages of this process can be simplified through a graphical user interface and you can drag and drop the dataset to create charts supported by the software (although it is quite limited at this time).\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/049feac0adcf658572f4d427ad661381/interface.png\",\n    \"alt\": \"GlueViz user interface\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image 1. GlueViz user interface\")), mdx(\"h2\", {\n    \"id\": \"features\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#features\",\n    \"aria-label\": \"features permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"Features\"), mdx(\"p\", null, \"This section outlines some notable features of Glueviz. The speaker mentioned that there is a geospatial tool for Glueviz but not working well in anaconda. If you are interested in this, it is best to install it using \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"pip\"), \".\"), mdx(\"h3\", {\n    \"id\": \"selection-propagation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#selection-propagation\",\n    \"aria-label\": \"selection propagation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"Selection propagation\"), mdx(\"p\", null, \"One major feature of Glueviz is the ability to synchronise selections across multiple plots from the same dataset. When you use the selection tool to create a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"subset\"), \" of a plot (say plot A which includes any data points that falls within the selection area), this will create a new coloured layer on top of the plot. Then any other plots created from the same dataset of the plot A will also highlight the selected data points.\"), mdx(\"p\", null, \"The following image illustrates this feature.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/45574ac2160cc4f12943fd81b98af034/selection_propagate.png\",\n    \"alt\": \"Illustration of selection propagation\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image 2. Illustration of selection propagation\")), mdx(\"p\", null, \"The plot on the top right is a 2D image with three subsets, and the plot on the top left is a Histogram created from the red colour subset. The 2D scatter plot on the bottom is more interesting. This plot is created from the same dataset \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w5\"), \" used in the 2D image, and you can see that different colours of selections in the 2D image are also mapped onto this scatter plot. Of course, you can choose not to display a certain selection (plot) layer in the menu on the left hand side. This feature is particularly useful when you explore the dataset with multiple plots. If you have two more datasets, the selection propagation is still possible via \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Data Linking\"), \".\"), mdx(\"h3\", {\n    \"id\": \"data-linking\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#data-linking\",\n    \"aria-label\": \"data linking permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"Data Linking\"), mdx(\"p\", null, \"Sometimes we would like to link two different datasets together and we can do this by using the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"link data\"), \" button in Glueviz to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"glue\"), \" the same attribute or attributes that describe the same quantity. In this way, selections will also be propagated between datasets.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/37783b6cf1b460560fc5857ea9955063/link-data.png\",\n    \"alt\": \"Link data in Glueviz\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image 3. Link data in Glueviz\")), mdx(\"p\", null, \"Image 3 is an example of linking same attributes from two astronomy datasets \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w5\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w5_psc\"), \". At the bottom you can see that Glueviz have some built-in advanced links in which you can link translated attributes, or attributes effectively describing the same quantity. If you cannot find a link that suite your need, you can create a custom linking function programatically in the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"config.py\"), \" file located under the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \".glue\"), \" directory. You can find more details about this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.glueviz.org/en/stable/customizing_guide/customization.html#custom-links\"\n  }, \"here\"), \".\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/84d1a09e4e795d9acbaf1112d5d90ee2/linkage.png\",\n    \"alt\": \"An example of selection propagation in data linking\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image 4. An example of selection propagation in data linking\")), mdx(\"p\", null, \"The layout of Image 4 is similar to Image 2 but the bottom plot is replaced by a 2D scatter plot from the dataset \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w5_psc\"), \". As you may have observed that blue and orange layers are also passed to the scatter plot, whereas the green and red selections are not propagated because attributes in these layers does not have a link to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"w5_psc\"), \" (unlike \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Right Ascension\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Declination\"), \").\"), mdx(\"h3\", {\n    \"id\": \"arithmetic-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#arithmetic-attributes\",\n    \"aria-label\": \"arithmetic attributes permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"Arithmetic attributes\"), mdx(\"p\", null, \"It is very common to create a new variable from existing variables, also known as data transformation during data processing/analysis. It is recommended that we do not store transformed/normalised variables in the original data file, but recalculate them whenever they are needed. By sticking to this computational good practice, we can minimise the confusion when other people look at these files.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/0e90d52da288b4385f032198d56130eb/arithmetic.png\",\n    \"alt\": \"Create a arithmetic attribute in Glueviz\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image 5. Create a arithmetic attribute in Glueviz\")), mdx(\"p\", null, \"To create a new attribute for the existing dataset, simply click the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Arithmetic attributes\"), \" button on the top menu, then follow the instruction shown in the dialog box. Users are given the option to use functions from the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"numpy\"), \" library, as well as any functions defined in the\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \".glue/config.py\"), \" file.\"), mdx(\"h3\", {\n    \"id\": \"session-export\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#session-export\",\n    \"aria-label\": \"session export permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"Session export\"), mdx(\"p\", null, \"One thing that I like about Glueviz is the ability to store the current session (literally everything, can include data if you wish to) so you could technically put your work in version control! If you have used RStudio before then this feature should sound familiar. One tip is to export the session regularly, especially before you want to close any windows - as this could sometimes crash the Glueviz.\"), mdx(\"p\", null, \"PS. It can be quite frustrating when a Jupyter notebook crashes and loses all defined variables. Although you can use this \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://pypi.org/project/dill/\"\n  }, \"Dill\")), \" package to do some extra work...\"), mdx(\"h3\", {\n    \"id\": \"extensibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#extensibility\",\n    \"aria-label\": \"extensibility permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"Extensibility\"), mdx(\"p\", null, \"As I have mentioned, Glueviz has an integrated IPython terminal in which you can open from the top right corner. Everything that is typed in the terminal will be reflected on the graphs created. You can also use it to find out more about Glueviz\", \"'\", \"s data structure and manipulate your data if you wish to.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/b10b9571e3cb2a86f16a1d655066712a/terminal.png\",\n    \"alt\": \"IPython terminal\"\n  }), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image 6. IPython terminal\")), mdx(\"p\", null, \"Another way to use Glueviz is through its \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.glueviz.org/en/stable/developer_guide/api.html?highlight=API\"\n  }, \"API\"), \". Glueviz provides various endpoints so if you are a Python expert and want the maximum flexibility, this is probably the best starting point.\"), mdx(\"h2\", {\n    \"id\": \"wrap-up\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#wrap-up\",\n    \"aria-label\": \"wrap up permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"undefined\", {\n    parentName: \"a\"\n  })), \"Wrap-up\"), mdx(\"p\", null, \"In this blog post I have briefly introduced Glueviz and what it can do to help you explore different, interrelated datasets. If you would like to learn more about Glueviz there are excellent \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.glueviz.org/en/stable/index.html\"\n  }, \"official documentation\"), \" available online and you can also check out the Jonathan's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://n8cir.org.uk/events/event-resource/glueviz/\"\n  }, \"training materials\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#heterogeneous-data","title":"Heterogeneous data"},{"url":"#glueviz","title":"GlueViz"},{"url":"#features","title":"Features","items":[{"url":"#selection-propagation","title":"Selection propagation"},{"url":"#data-linking","title":"Data Linking"},{"url":"#arithmetic-attributes","title":"Arithmetic attributes"},{"url":"#session-export","title":"Session export"},{"url":"#extensibility","title":"Extensibility"}]},{"url":"#wrap-up","title":"Wrap-up"}]},"fields":{"slug":"/blog/18/02/2022/Glue-Viz-for-Heterogeneous-Data","readingTime":{"text":"7 min read"},"slugOrigin":"/2022-02-18-Glue-Viz-for-Heterogeneous-Data/"},"frontmatter":{"type":null,"title":"GlueViz for Heterogeneous data","date":"18 February 2022","description":"An open-sourced Python library with graphical user interace. Built on top of well known packages such as Numpy, Scipy, and Matplotlib.","tag":["Heterogeneous","Python"],"category":["Articles"],"featured":null,"thumbnail":null,"author":[{"name":"Yu Liang Weng","avatar":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/0b4fd531c4d7e2b13cad834b37cad1fc/28b02/Y.L_Weng.jpg","srcSet":"/static/0b4fd531c4d7e2b13cad834b37cad1fc/28b02/Y.L_Weng.jpg 591w","sizes":"100vw"},"sources":[{"srcSet":"/static/0b4fd531c4d7e2b13cad834b37cad1fc/dacf8/Y.L_Weng.webp 591w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9475465313028765}}}}],"disableTOC":null,"d3":null}}},"pageContext":{"id":"4cc7aebe-f567-5c65-a4a2-4901b07a7615","slug":"/blog/18/02/2022/Glue-Viz-for-Heterogeneous-Data","next":{"node":{"id":"be12cc6d-9288-55ca-981a-3aefd235eee2","fields":{"slug":"/blog/08/11/2021/New-Visualisation-Page"},"frontmatter":{"template":null,"title":"Introducing the new visualisation page","date":"Monday 8th November 2021","category":["News"],"tag":["Dataviz","Research"],"d3":null,"type":null,"published":null}}}}},
    "staticQueryHashes": ["160810946","3815917638","3976606562"]}